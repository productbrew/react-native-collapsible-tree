{"version":3,"sources":["List.tsx"],"names":["List","props","itemMeasure","setItemMeasure","height","setHeight","level","flex","flexDirection","flexWrap","treeData","map","item","isSelected","selectedItemId","id","marginBottom","undefined","event","nativeEvent","layout","x","y","width","prev","buttonComponent","zIndex","position","top","backgroundColor","getRandomColor","fontSize","color","name","children","length","Math","floor"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { SafeAreaView, Text, View } from \"react-native\";\n\nimport { DataStructure } from \"../types/treeData\";\n\ntype ListProps<T extends DataStructure> = {\n  level?: number;\n  selectedItemId: T[\"id\"] | null | undefined;\n  buttonComponent: (data: DataStructure, level: number) => React.ReactNode;\n  treeData: T[];\n};\n\nexport default function List<T extends DataStructure>(props: ListProps<T>) {\n  const [itemMeasure, setItemMeasure] = useState<{\n    [key: number]: { height: number; y: number };\n  }>({});\n  const [height, setHeight] = useState(0);\n\n  const level = props.level ?? 0;\n\n  return (\n    <SafeAreaView style={{ flex: 1 }}>\n      <View style={{ flexDirection: \"row\", flexWrap: \"wrap\" }}>\n        {props.treeData.map((item) => {\n          const isSelected = props.selectedItemId === item.id;\n\n          return (\n            <React.Fragment key={`${level}-${item.id}`}>\n              <View\n                style={isSelected ? { marginBottom: height } : undefined}\n                onLayout={(event) => {\n                  const { x, y, height, width } = event.nativeEvent.layout;\n\n                  setItemMeasure((prev) => ({\n                    ...prev,\n                    [item.id]: { x, y, height, width },\n                  }));\n                }}\n              >\n                {props.buttonComponent(item, level)}\n              </View>\n\n              {isSelected ? (\n                <View\n                  onLayout={(event) => {\n                    setHeight(event.nativeEvent.layout.height);\n                  }}\n                  style={{\n                    zIndex: level,\n                    width: \"100%\",\n                    position: \"absolute\",\n                    top:\n                      // height is for button andd Y is the movement\n                      (itemMeasure[item.id]?.height ?? 0) +\n                      (itemMeasure[item.id]?.y ?? 0),\n                  }}\n                >\n                  <View style={{ backgroundColor: getRandomColor(level) }}>\n                    <Text style={{ fontSize: 25, color: \"white\" }}>\n                      Level: {level}-{item.name}={item.children?.length ?? 0}\n                      childrens\n                    </Text>\n\n                    {item.children ? (\n                      <Text style={{ fontSize: 15, color: \"white\" }}>\n                        Render children\n                      </Text>\n                    ) : null}\n                  </View>\n                </View>\n              ) : null}\n            </React.Fragment>\n          );\n        })}\n      </View>\n    </SafeAreaView>\n  );\n}\n\nfunction getRandomColor(level: number) {\n  return (\n    \"rgb(\" +\n    Math.floor((level / 100) * 256) +\n    \",\" +\n    Math.floor((level / 10) * 256) +\n    \",\" +\n    Math.floor((level / 10) * 256) +\n    \")\"\n  );\n}\n"]}